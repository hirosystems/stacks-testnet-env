x-common-vars:
  - &STACKING_CYCLES ${STACKING_CYCLES:-1} # number of cycles to stack-stx or stack-extend for
  - &STACKING_KEYS ${STACKING_KEYS:-""} # number of cycles to stack-stx or stack-extend for
  - &EXIT_FROM_MONITOR 1 # set to "1" to automatically shut down via monitor.ts

services:
  bitcoind:
    networks:
      - stacks
    image: dobtc/bitcoin:25.1
    restart: unless-stopped
    ports:
      - "18443:18443"
      - "18444:18444"
    volumes:
      - ./configs/bitcoin.conf:/home/.bitcoin/bitcoin.conf
      - ./chainstate:/chainstate
    environment:
      BITCOIN_DATA: /chainstate/bitcoin
    command:
      - -conf=/home/.bitcoin/bitcoin.conf

  stacks-node:
    networks:
      - stacks
    image: blockstack/stacks-core:3.0.0.0.0-rc5
    restart: unless-stopped
    depends_on:
      - bitcoind
    ports:
      - "20443:20443"
    volumes:
      - ./configs/stacks-miner.toml/:/app/config.toml
      - ./chainstate:/chainstate
    # environment:
      # STACKS_LOG_TRACE: 1 # uncomment for trace logging
      # STACKS_LOG_DEBUG: 1
      # RUST_LOG: debug
    command:
      - /bin/stacks-node
      - start
      - --config
      - /app/config.toml

  stacks-signer:
    networks:
      - stacks
    image: blockstack/stacks-core:3.0.0.0.0-rc5
    restart: unless-stopped
    depends_on:
      - stacks-node
    volumes:
      - ./configs/stacks-signer.toml/:/app/config.toml
      - ./chainstate:/chainstate
    command:
      - /bin/stacks-signer
      - run
      - --config
      - /app/config.toml

  stacker:
    networks:
      - stacks
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.stacker
    restart: unless-stopped
    environment:
      STACKS_CORE_RPC_HOST: stacks-node
      STACKS_CORE_RPC_PORT: 20443
      STACKING_CYCLES: *STACKING_CYCLES
      STACKING_INTERVAL: 2 # interval (seconds) for checking if stacking transactions are needed
      STACKING_KEYS: *STACKING_KEYS
      POST_TX_WAIT: 10 # seconds to wait after a stacking transaction broadcast before continuing the loop
      SERVICE_NAME: stacker
    depends_on:
      - stacks-node

  # monitor:
  #   networks:
  #     - stacks
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.stacker
  #   environment:
  #     STACKS_CORE_RPC_HOST: stacks-api
  #     STACKS_CORE_RPC_PORT: 3999
  #     STACKING_CYCLES: *STACKING_CYCLES
  #     STACKING_KEYS: *STACKING_KEYS
  #     EXIT_FROM_MONITOR: *EXIT_FROM_MONITOR
  #     SERVICE_NAME: monitor
  #   depends_on:
  #     - stacks-node
  #   entrypoint:
  #     - /bin/bash
  #     - -c
  #     - |
  #       set -e
  #       exec npx tsx /root/monitor.ts

networks:
  stacks:
volumes:
  chainstate:
